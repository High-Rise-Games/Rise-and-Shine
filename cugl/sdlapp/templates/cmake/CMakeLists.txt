# PROJECT CMAKE FILE
# This file is autogenerated by the creator script
cmake_minimum_required(VERSION 3.10)
set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)

# set the project name and version
project(__TARGET__ VERSION __VERSION__)

# Disallow in-source builds
if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message("ERROR: The application cannot be built in this directory.")
	message("See the README.md for more information.")
    message(FATAL_ERROR "Quitting configuration")
endif()

# Need all this for Linux
if (UNIX AND NOT APPLE)
  include(CheckLibraryExists)
  include(CheckIncludeFiles)
  include(CheckIncludeFile)
  include(CheckLanguage)
  include(CheckSymbolExists)
  include(CheckCSourceCompiles)
  include(CheckCSourceRuns)
  include(CheckCCompilerFlag)
  include(CheckCXXCompilerFlag)
  include(CheckStructHasMember)
  include(CMakeDependentOption)
  include(CMakePushCheckState)
  include(GNUInstallDirs)
endif()

# specify the C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Change this to modify how the library is handled
option(BUILD_SHARED_BASE "Build the SDL component as a shared library" OFF)


# Set the correct directories
set(SDL2_DIR  __SDL2DIR__)
set(ASSET_DIR  __ASSETDIR__)
if (MSVC)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY $<1:${CMAKE_BINARY_DIR}/install>)
else()
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/install")
endif()

# Link in sdl2
if (BUILD_SHARED_BASE)
	set(SDL2PCKG_BUILD_SHARED_LIBS ON)
	add_subdirectory("${SDL2_DIR}/buildfiles/cmake" "sdl2pckg.dir")
	list(APPEND EXTRA_LIBS SDL2_pckg::SDL2_pckg)
else()
	set(SDL2PCKG_BUILD_SHARED_LIBS OFF)
	add_subdirectory("${SDL2_DIR}/buildfiles/cmake" "sdl2pckg.dir")
	list(APPEND EXTRA_LIBS SDL2_pckg::SDL2_pckg-static)
endif()
list(APPEND EXTRA_INCLUDES "${SDL2_DIR}/include")
__EXTRA_INCLUDES__

# Everyone EXCEPT APPLE needs some form of OpenGL
if(APPLE)
	add_definitions(-DGL_SILENCE_DEPRECATION)
    set(LINK_TO_OPENGL FALSE)
else()
    if (UNIX)
      set(OpenGL_GL_PREFERENCE "GLVND")
      find_package(GLEW REQUIRED)
    endif()
    find_package(OpenGL REQUIRED)
    set(LINK_TO_OPENGL TRUE)
endif()

# Visual Studio is such a mess
if (MSVC)
    set(SIZEOF_VOIDP ${CMAKE_SIZEOF_VOID_P})
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
      set(ARCH_64 TRUE)
      set(PROCESSOR_ARCH "x64")
    else()
      set(ARCH_64 FALSE)
      set(PROCESSOR_ARCH "x86")
    endif()

    if(CMAKE_BUILD_TYPE)
        set(MSC_BUILD_TYPE ${CMAKE_BUILD_TYPE})
    else()
        set(MSC_BUILD_TYPE "Debug")
    endif()

    add_compile_options(/wd4068)
    add_compile_options(/wd4018)
    add_compile_options(/wd4244)
    add_compile_options(/wd4267)
    add_compile_options(/wd4305)
    add_compile_options(/wd4800)
    add_compile_options(/wd4996)
    add_compile_options(/wd26812)
    add_compile_options(/wd26495)
    add_definitions(-D_WINDOWS)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    list(APPEND EXTRA_INCLUDES "${SDL2_DIR}/templates/windows/include")
    list(APPEND EXTRA_LIBS "${CMAKE_SOURCE_DIR}/${SDL2_DIR}/buildfiles/windows/sdl2/lib/${PROCESSOR_ARCH}/glew32.lib")
endif()

# Add the source code
file(GLOB SOURCE_FILES
    __SOURCELIST__)

# Build and link
add_executable(__TARGET__ ${SOURCE_FILES})
set_target_properties(
    __TARGET__
    PROPERTIES
        OUTPUT_NAME "__APPNAME__"
        SUFFIX ".exe"
)

target_link_libraries(__TARGET__ PUBLIC ${EXTRA_LIBS})
if (LINK_TO_OPENGL AND OPENGL_FOUND)
    target_link_libraries(__TARGET__ PUBLIC ${OPENGL_LIBRARIES})
endif()
if (GLEW_FOUND)
    target_link_libraries(__TARGET__ PUBLIC ${GLEW_LIBRARIES})
endif()
target_include_directories(__TARGET__ PUBLIC
                           "${PROJECT_BINARY_DIR}"
                            ${EXTRA_INCLUDES}
                           )

# Copy the assets to the output directory
file(GLOB ASSET_FILES "${ASSET_DIR}/*")
foreach(Asset IN LISTS ASSET_FILES)
  file(COPY ${Asset} DESTINATION "${CMAKE_BINARY_DIR}/install/")
endforeach()
if (MSVC)
   file(GLOB DLL_FILES "${SDL2_DIR}/buildfiles/windows/dlls/${PROCESSOR_ARCH}/*")
   foreach(DLL IN LISTS DLL_FILES)
       file(COPY ${DLL} DESTINATION "${CMAKE_BINARY_DIR}/install/")
   endforeach()
endif()
